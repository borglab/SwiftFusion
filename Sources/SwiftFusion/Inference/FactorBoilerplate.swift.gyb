// Copyright 2020 The SwiftFusion Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// Implements fixed-arity protocols `Factor1`, `VectorFactor1`, `LinearizableFactor1`, `Factor2`,
/// etc. It takes less boilerplate to conform to these fixed-arity protocols than it does to
/// conform to the arbitrary-arity protocols `Factor`, `VectorFactor`, and `LinearizableFactor`.

import _Differentiation
import PenguinStructures

% for arity in range(1, 6):

%{
def repeated(template):
  if isinstance(template, str):
    template_str = template
    template = lambda i: template_str % i
  return ', '.join([template(i) for i in range(arity)])

def tuple_component(tuple, i):
  return ''.join([tuple] + ['.tail'] * i + ['.head'])
}%

// Artifact of Swift weakness.
/// Do not use this. Use `Factor${arity}` instead.
public protocol Factor${arity}_ {
  % for i in range(arity):
  /// The ${i}-th variable type.
  associatedtype V${i}
  % end

  /// Returns the error at the given point.
  ///
  /// This is typically interpreted as negative log-likelihood.
  func error(${repeated('_: V%d')}) -> Double
}

/// A factor in a factor graph.
public protocol Factor${arity}: Factor, Factor${arity}_
  where Variables == Tuple${arity}<${repeated('V%d')}> {}

extension Factor${arity} {
  % for i in range(arity):
  /// The variable vertex for this factor's ${i}-th variable.
  public var input${i}ID: TypedID<V${i}> { return ${tuple_component('edges', i)} }
  % end

  // Forwarding implementation.
  public func error(at x: Variables) -> Double {
    return error(${repeated(lambda i: tuple_component('x', i))})
  }
}

// Artifact of Swift weakness.
/// Do not use this. Use `VectorFactor${arity}` instead.
public protocol VectorFactor${arity}_ {
  % for i in range(arity):
  /// The ${i}-th variable type.
  associatedtype V${i}
  % end

  typealias Variables = Tuple${arity}<${repeated('V%d')}>

  associatedtype ErrorVector: Vector
  associatedtype LinearizableComponent: LinearizableFactor

  /// Returns the error vector at the given point.
  func errorVector(${repeated('_: V%d')}) -> ErrorVector

  /// Returns the linearizable component of `self` at the given point, and returns the
  /// `Differentiable` subset of the given variables.
  func linearizableComponent(${repeated('_: V%d')})
    -> (LinearizableComponent, LinearizableComponent.Variables)
}

/// A factor whose `error` is a function of a vector-valued `errorVector` function.
public protocol VectorFactor${arity}: VectorFactor, VectorFactor${arity}_
  where Variables == Tuple${arity}<${repeated('V%d')}> {}

extension VectorFactor${arity} {
  % for i in range(arity):
  /// The variable vertex for this factor's ${i}-th variable.
  public var input${i}ID: TypedID<V${i}> { return ${tuple_component('edges', i)} }
  % end

  // Implements the error as half the squared norm of the error vector.
  public func error(at x: Variables) -> Double {
    return 0.5 * errorVector(at: x).squaredNorm
  }

  // Forwarding implementation.
  public func errorVector(at x: Variables) -> ErrorVector {
    return errorVector(${repeated(lambda i: tuple_component('x', i))})
  }

  // Forwarding implementation.
  public func linearizableComponent(at x: Variables)
    -> (LinearizableComponent, LinearizableComponent.Variables)
  {
    return linearizableComponent(${repeated(lambda i: tuple_component('x', i))})
  }
}

// Artifact of Swift weakness.
/// Do not use this. Use `LinearizableFactor${arity}` instead.
public protocol LinearizableFactor${arity}_ {
  % for i in range(arity):
  /// The ${i}-th variable type.
  associatedtype V${i}: Differentiable
  % end

  typealias Variables = Tuple${arity}<${repeated('V%d')}>
  typealias LinearizableComponent = Self

  associatedtype ErrorVector: Vector

  /// Returns the error vector given the values of the adjacent variables.
  @differentiable(reverse)
  func errorVector(${repeated('_: V%d')}) -> ErrorVector
}

/// A factor, with ${arity} variable(s), in a factor graph.
public protocol LinearizableFactor${arity}: LinearizableFactor, LinearizableFactor${arity}_
  where Variables == Tuple${arity}<${repeated('V%d')}>, LinearizableComponent == Self {}

extension LinearizableFactor${arity} {
  % for i in range(arity):
  /// The variable vertex for this factor's ${i}-th variable.
  public var input${i}ID: TypedID<V${i}> { return ${tuple_component('edges', i)} }
  % end

  // Implements the error as half the squared norm of the error vector.
  public func error(at x: Variables) -> Double {
    return 0.5 * errorVector(at: x).squaredNorm
  }

  // Forwarding implementation.
  @differentiable(reverse)
  public func errorVector(at x: Variables) -> ErrorVector {
    return errorVector(${repeated(lambda i: tuple_component('x', i))})
  }
}

% end
