import Foundation
import TensorFlow
import XCTest

import SwiftFusion

% import math
% dims = range(1, 10)

class VectorNTests: XCTestCase {
  % for dim in dims:
  % if dim <= 3:
  %   coordinates = ['x', 'y', 'z'][0:dim]
  % else:
  %   coordinates = ['s%d' % i for i in range(dim)]
  % end
  % values1 = range(1, dim + 1)
  % values2 = range(dim + 1, 2 * dim + 1)

  /// Test that initializing a vector from coordinate values works.
  func testVector${dim}Init() {
    let vector1 = Vector${dim}(${', '.join([str(v) for v in values1])})
    % for (index, coordinate) in enumerate(coordinates):
    XCTAssertEqual(vector1.${coordinate}, ${values1[index]})
    % end
  }

  func testVector${dim}VectorConformance() {
    let s = (0..<${dim}).lazy.map { Double($0) }
    let v = Vector${dim}(${', '.join([str(v) for v in range(dim)])})
    v.checkVectorSemantics(
      expectingScalars: s,
      writingScalars: (${dim}..<${2 * dim}).lazy.map { Double($0) },
      maxSupportedScalarCount: ${dim})
    v.scalars.checkRandomAccessCollectionSemantics(
      expecting: s,
      maxSupportedCount: ${dim})
  }
  % end
}
